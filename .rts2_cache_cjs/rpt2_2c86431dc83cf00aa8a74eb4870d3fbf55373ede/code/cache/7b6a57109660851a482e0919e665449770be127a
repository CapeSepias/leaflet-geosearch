{"code":"import AbstractProvider from './provider';\r\nexport default class OpenCageProvider extends AbstractProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.searchUrl = 'https://api.opencagedata.com/geocode/v1/json';\r\n    }\r\n    endpoint({ query }) {\r\n        const params = typeof query === 'string' ? { q: query } : query;\r\n        params.format = 'json';\r\n        return this.getUrl(this.searchUrl, params);\r\n    }\r\n    parse(response) {\r\n        return response.data.results.map((r) => ({\r\n            x: r.geometry.lng,\r\n            y: r.geometry.lat,\r\n            label: r.formatted,\r\n            bounds: [\r\n                [r.bounds.southwest.lat, r.bounds.southwest.lng],\r\n                [r.bounds.northeast.lat, r.bounds.northeast.lng],\r\n            ],\r\n            raw: r,\r\n        }));\r\n    }\r\n}\r\n//# sourceMappingURL=openCageProvider.js.map","map":"{\"version\":3,\"file\":\"openCageProvider.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/providers/openCageProvider.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,gBAA2E,MAAM,YAAY,CAAC;AAkErG,MAAM,CAAC,OAAO,OAAO,gBAAiB,SAAQ,gBAA0C;IAAxF;;QACE,cAAS,GAAG,8CAA8C,CAAC;IAqB7D,CAAC;IAnBC,QAAQ,CAAC,EAAE,KAAK,EAAoB;QAClC,MAAM,MAAM,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;QAChE,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;QAEvB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,QAAsC;QAC1C,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACvC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG;YACjB,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG;YACjB,KAAK,EAAE,CAAC,CAAC,SAAS;YAClB,MAAM,EAAE;gBACN,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;gBAChD,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;aACjD;YACD,GAAG,EAAE,CAAC;SACP,CAAC,CAAC,CAAC;IACN,CAAC;CACF\"}","dts":{"name":"/home/smeijer/dev/leaflet-geosearch/src/providers/openCageProvider.d.ts","writeByteOrderMark":false,"text":"import AbstractProvider, { EndpointArgument, LatLng, ParseArgument, SearchResult } from './provider';\r\nexport interface RequestResult {\r\n    results: RawResult[];\r\n}\r\nexport interface RawResult {\r\n    annotations: {\r\n        DMS: {\r\n            lat: string;\r\n            lng: string;\r\n        };\r\n        MGRS: string;\r\n        Maidenhead: string;\r\n        Mercator: {\r\n            x: number;\r\n            y: number;\r\n        };\r\n        OSM: {\r\n            edit_url: string;\r\n            note_url: string;\r\n            url: string;\r\n        };\r\n        UN_M49: {\r\n            regions: {\r\n                [key: string]: string;\r\n            };\r\n            statistical_groupings: string[];\r\n        };\r\n        callingcode: number;\r\n        currency: {\r\n            alternate_symbols: string[];\r\n            decimal_mark: string;\r\n            html_entity: string;\r\n            iso_code: string;\r\n            iso_numeric: string;\r\n            name: string;\r\n            smallest_denomination: number;\r\n            subunit: string;\r\n            subunit_to_unit: number;\r\n            symbol: string;\r\n            symbol_first: number;\r\n            thousands_separator: string;\r\n        };\r\n        flag: string;\r\n        geohash: string;\r\n        qibla: number;\r\n        roadinfo: {\r\n            drive_on: string;\r\n            road: string;\r\n            road_type: string;\r\n            speed_in: string;\r\n        };\r\n        sun: {\r\n            rise: {\r\n                apparent: number;\r\n                astronomical: number;\r\n                civil: number;\r\n                nautical: number;\r\n            };\r\n            set: {\r\n                apparent: number;\r\n                astronomical: number;\r\n                civil: number;\r\n                nautical: number;\r\n            };\r\n        };\r\n        timezone: {\r\n            name: string;\r\n            now_in_dst: number;\r\n            offset_sec: number;\r\n            offset_string: string;\r\n            short_name: string;\r\n        };\r\n        what3words: {\r\n            words: string;\r\n        };\r\n    };\r\n    bounds: {\r\n        northeast: LatLng;\r\n        southwest: LatLng;\r\n    };\r\n    formatted: string;\r\n    geometry: LatLng;\r\n}\r\nexport default class OpenCageProvider extends AbstractProvider<RequestResult, RawResult> {\r\n    searchUrl: string;\r\n    endpoint({ query }: EndpointArgument): string;\r\n    parse(response: ParseArgument<RequestResult>): SearchResult<RawResult>[];\r\n}\r\n"}}
